/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/gym/logger.py:30: UserWarning: [33mWARN: Box bound precision lowered by casting to float32
  warnings.warn(colorize('%s: %s'%('WARN', msg % args), 'yellow'))
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/train.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  actor_critic.load_state_dict(torch.load(load_path),strict=False)
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:731: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  robot_vel_pos_list=[torch.tensor(item) for item in self.robot_vel_pos_deque[robot_index]]
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:732: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  lidar_list=[torch.tensor(item) for item in self.lidar_deque[robot_index]]
Loaded the following checkpoint: trained_models/my_model/trans_pos_2/checkpoints/00200.pt
torch.Size([1, 1, 1, 5])
tensor([[[[0.0000, 0.6000, 1.7756, 4.1679, 3.8925]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.0000,  0.6000, -5.8579,  7.1743,  1.9940]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.0000,  0.6000,  1.3031, -5.0596,  3.3193]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2990, 0.6000, 1.7115, 4.1293, 3.6835]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2258,  0.6000, -5.8670,  7.2300,  1.7341]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2149,  0.6000,  1.2496, -5.0548,  3.0518]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3644, 0.6000, 1.6422, 4.0702, 3.8471]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2238,  0.6000, -5.8616,  7.2857,  1.4729]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2492,  0.6000,  1.1907, -5.0344,  2.8082]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4019, 0.6000, 1.5575, 4.0162, 3.7095]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2797,  0.6000, -5.8395,  7.3521,  1.2504]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2206,  0.6000,  1.1451, -5.0034,  2.5448]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3251, 0.6000, 1.4819, 3.9863, 3.5186]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2570,  0.6000, -5.8055,  7.4066,  1.0123]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2687,  0.6000,  1.0996, -4.9540,  2.3147]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4221, 0.6000, 1.3893, 3.9356, 3.6422]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2212,  0.6000, -5.7650,  7.4442,  0.7492]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2470,  0.6000,  1.0700, -4.8998,  2.0695]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2890, 0.6000, 1.3348, 3.8882, 3.8582]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2504,  0.6000, -5.7103,  7.4746,  0.5064]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2653,  0.6000,  1.0526, -4.8358,  1.8371]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2937, 0.6000, 1.2909, 3.8293, 4.0709]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2938,  0.6000, -5.6400,  7.4959,  0.2938]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3386,  0.6000,  1.0454, -4.7514,  1.6555]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3498, 0.6000, 1.2272, 3.7694, 3.8972]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3114,  0.6000, -5.5624,  7.5031,  0.0934]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4426,  0.6000,  1.0241, -4.6429,  1.7648]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3188, 0.6000, 1.1597, 3.7270, 3.7019]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5056,  0.6000, -5.4376,  7.5231,  0.1589]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3672,  0.6000,  1.0211, -4.5511,  1.6032]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3405, 0.6000, 1.0969, 3.6696, 3.8821]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 3.7502e-01,  6.0000e-01, -5.3439e+00,  7.5234e+00,  2.7011e-03]]]],
       device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4027,  0.6000,  1.0042, -4.4519,  1.7402]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3559, 0.6000, 1.0423, 3.5993, 4.0516]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5610,  0.6000, -5.2037,  7.5276,  0.0298]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5704,  0.6000,  0.9830, -4.3109,  1.7196]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4518, 0.6000, 0.9825, 3.5035, 4.1546]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5222,  0.6000, -5.0736,  7.5385,  0.0838]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4820,  0.6000,  0.9555, -4.1936,  1.8015]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3178, 0.6000, 0.9281, 3.4456, 3.9586]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3465,  0.6000, -4.9873,  7.5305,  6.1910]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4703,  0.6000,  0.9390, -4.0771,  1.7115]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5890, 0.6000, 0.8265, 3.3390, 3.9509]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5957,  0.6000, -4.8390,  7.5173,  6.1940]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4690,  0.6000,  0.9121, -3.9630,  1.8024]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5508, 0.6000, 0.7282, 3.2426, 3.9168]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4622,  0.6000, -4.7254,  7.4960,  6.0983]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4044,  0.6000,  0.9024, -3.8624,  1.6666]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5457, 0.6000, 0.6272, 3.1509, 3.8791]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4946,  0.6000, -4.6059,  7.4645,  6.0251]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2742,  0.6000,  0.9113, -3.7944,  1.4404]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5465, 0.6000, 0.5296, 3.0553, 3.9162]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4583,  0.6000, -4.4985,  7.4245,  5.9267]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4841,  0.6000,  0.9366, -3.6761,  1.3599]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3541, 0.6000, 0.4567, 3.0051, 3.7455]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5741,  0.6000, -4.3649,  7.3720,  5.9087]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4580,  0.6000,  0.9715, -3.5670,  1.2613]]]], device='cuda:0')
tensor([[[[ 0.2677,  0.6000,  0.9616, -3.3154,  1.8066]]]], device='cuda:0')
tensor([[[[0.5182, 0.6000, 0.3544, 2.9256, 3.8022]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2946,  0.6000, -4.2922,  7.3601,  6.1208]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2824,  0.6000,  0.9778, -3.4967,  1.4818]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4642, 0.6000, 0.2565, 2.8633, 3.7079]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4218,  0.6000, -4.1869,  7.3560,  6.2446]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4646,  0.6000,  0.9772, -3.3805,  1.5758]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4077, 0.6000, 0.1785, 2.7976, 3.8415]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4822,  0.6000, -4.0672,  7.3415,  6.1627]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2677,  0.6000,  0.9616, -3.3154,  1.8066]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3216, 0.6000, 0.1281, 2.7350, 4.0348]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5037,  0.6000, -3.9435,  7.3181,  6.0958]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5076,  0.6000,  0.9241, -3.1942,  1.8708]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3858, 0.6000, 0.0794, 2.6517, 4.1836]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4275,  0.6000, -3.8369,  7.3108,  6.2156]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5814,  0.6000,  0.8829, -3.0548,  1.8579]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3973, 0.6000, 0.0178, 2.5739, 4.0428]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4059,  0.6000, -3.7375,  7.2904,  6.0808]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3764,  0.6000,  0.8426, -2.9698,  2.0132]]]], device='cuda:0')
Predictor Training Loss: 18.304999033610027 KL Loss: 265.03818766276044 CE Loss: 15.654617309570312
tensor([[[[ 0.5976,  0.6000, -0.0751,  2.4569,  4.0411]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3988,  0.6000, -3.6436,  7.2570,  5.9410]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3693,  0.6000,  0.8169, -2.8811,  1.8530]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3427,  0.6000, -0.1156,  2.3814,  4.2198]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3249,  0.6000, -3.5736,  7.2157,  5.7500]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5299,  0.6000,  0.7863, -2.7522,  1.8043]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3108,  0.6000, -0.1653,  2.3216,  4.0190]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4181,  0.6000, -3.4910,  7.1517,  5.6237]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3637,  0.6000,  0.7511, -2.6684,  1.9684]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3790,  0.6000, -0.2140,  2.2404,  4.1724]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4110,  0.6000, -3.4187,  7.0786,  5.4924]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5343,  0.6000, -0.2774,  2.1228,  4.2181]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5358,  0.6000, -3.3204,  6.9877,  5.5370]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4806,  0.6000, -0.3429,  2.0221,  4.1352]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3032,  0.6000, -3.2554,  6.9487,  5.7431]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
Predictor Training Loss: 18.304999033610027 KL Loss: 265.03818766276044 CE Loss: 15.654617309570312
Avg wmse 0.21668732166290283 Avg ssim 0.5902652740478516
Predictor Training Loss: 15.467188835144043 KL Loss: 258.8209940592448 CE Loss: 12.878979047139486
Avg wmse 0.16588683426380157 Avg ssim 0.6957152485847473
Predictor Training Loss: 17.11146608988444 KL Loss: 235.85242716471353 CE Loss: 14.752942085266113
Avg wmse 0.17386925220489502 Avg ssim 0.690800666809082
Predictor Training Loss: 33.794191678365074 KL Loss: 237.96941630045572 CE Loss: 31.414498647054035
Avg wmse 0.28035473823547363 Avg ssim 0.45652198791503906
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:797: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  robot_vel_pos_list=[torch.tensor(item) for item in self.robot_vel_pos_deque[robot_index]]
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:798: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  lidar_list=[torch.tensor(item) for item in self.lidar_deque[robot_index]]
Predictor Training Loss: 33.60200182596842 KL Loss: 235.59159342447916 CE Loss: 31.24608612060547
Avg wmse 0.2860705256462097 Avg ssim 0.42667755484580994
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4806,  0.6000, -0.3429,  2.0221,  4.1352]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3032,  0.6000, -3.2554,  6.9487,  5.7431]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4598,  0.6000, -0.4147,  1.9323,  4.0378]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5864,  0.6000, -3.1289,  6.8745,  5.7525]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5093,  0.6000, -0.5004,  1.8381,  3.9748]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4523,  0.6000, -3.0261,  6.8276,  5.8551]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5110,  0.6000, -0.5803,  1.7385,  4.0366]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3485,  0.6000, -2.9543,  6.7782,  5.6804]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5264,  0.6000, -0.6572,  1.6317,  4.0878]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3500,  0.6000, -2.8918,  6.7168,  5.5068]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5813,  0.6000, -0.7407,  1.5127,  4.1007]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5469,  0.6000, -2.7908,  6.6247,  5.5437]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5367,  0.6000, -0.8225,  1.4064,  4.0568]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2393,  0.6000, -2.7380,  6.5966,  5.7942]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3942,  0.6000, -0.8708,  1.3205,  4.1997]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3153,  0.6000, -2.6625,  6.5740,  5.9919]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4026,  0.6000, -0.9317,  1.2403,  4.0627]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3985,  0.6000, -2.5640,  6.5590,  6.1319]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3500,  0.6000, -2.4766,  6.5609,  0.0223]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2468,  0.6000, -2.4164,  6.5473,  6.0602]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4840,  0.6000, -2.2966,  6.5301,  6.1408]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4444,  0.6000, -2.1856,  6.5263,  6.2489]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5312,  0.6000, -2.0528,  6.5281,  0.0134]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3124,  0.6000, -1.9760,  6.5136,  6.0969]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4309,  0.6000, -1.8686,  6.5062,  6.2143]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3162,  0.6000, -1.7923,  6.4854,  6.0172]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2936,  0.6000, -1.7272,  6.4516,  5.8044]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3248,  0.6000, -1.6493,  6.4285,  5.9955]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5805,  0.6000, -1.5107,  6.3855,  5.9819]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4807,  0.6000, -1.3993,  6.3405,  5.8991]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5065,  0.6000, -1.2791,  6.3007,  5.9641]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5094,  0.6000, -1.1559,  6.2685,  6.0270]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4379,  0.6000, -1.0538,  6.2290,  5.9144]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2681,  0.6000, -0.9984,  6.1912,  5.6839]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5581,  0.6000, -0.8809,  6.1159,  5.7130]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5248,  0.6000, -0.7743,  6.0394,  5.6608]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3818,  0.6000, -0.6893,  5.9961,  5.8123]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3313,  0.6000, -0.6098,  5.9729,  5.9990]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3619,  0.6000, -0.5199,  5.9621,  6.1643]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2943,  0.6000, -0.4467,  5.9690,  0.0934]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
Predictor Training Loss: 3.8117183844248452 KL Loss: 247.02935791015625 CE Loss: 1.341424783070882
Avg wmse 0.0008205498452298343 Avg ssim 0.9664013385772705
Predictor Training Loss: 5.7348175048828125 KL Loss: 235.80321756998697 CE Loss: 3.3767853577931723
Avg wmse 0.0164648350328207 Avg ssim 0.9125335812568665
Predictor Training Loss: 9.451032638549805 KL Loss: 239.94074503580728 CE Loss: 7.0516252517700195
Avg wmse 0.03882680460810661 Avg ssim 0.8152725100517273
Predictor Training Loss: 16.76004441579183 KL Loss: 208.55345662434897 CE Loss: 14.674509684244791
Avg wmse 0.1303683966398239 Avg ssim 0.7238209247589111
Predictor Training Loss: 18.851958592732746 KL Loss: 199.58710734049478 CE Loss: 16.856087684631348
Avg wmse 0.16267456114292145 Avg ssim 0.7038512229919434
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2943,  0.6000, -0.4467,  5.9690,  0.0934]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3665,  0.6000, -0.3553,  5.9627,  6.2144]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3209,  0.6000, -0.2757,  5.9727,  0.1251]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3198,  0.6000, -0.1959,  5.9672,  6.2136]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3060,  0.6000, -0.1201,  5.9774,  0.1346]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4344,  0.6000, -0.0115,  5.9796,  0.0196]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2828, 0.6000, 0.0578, 5.9655, 6.0826]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4613, 0.6000, 0.1725, 5.9535, 6.1789]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3800, 0.6000, 0.2674, 5.9581, 0.0485]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[5.3352e-01, 6.0000e-01, 4.0073e-01, 5.9584e+00, 2.3230e-03]]]],
       device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4104, 0.6000, 0.5025, 5.9451, 6.1539]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[4.0728e-01, 6.0000e-01, 6.0430e-01, 5.9456e+00, 4.5097e-03]]]],
       device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5197, 0.6000, 0.7340, 5.9534, 0.0603]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4469, 0.6000, 0.8456, 5.9483, 6.2372]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2687, 0.6000, 0.9102, 5.9300, 6.0071]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4540, 0.6000, 1.0220, 5.9102, 6.1085]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5834, 0.6000, 1.1659, 5.8865, 6.1200]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3750, 0.6000, 1.2549, 5.8571, 5.9637]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3944, 0.6000, 1.3520, 5.8398, 6.1065]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5403, 0.6000, 1.4859, 5.8215, 6.1479]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4316, 0.6000, 1.5938, 5.8196, 6.2648]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4058, 0.6000, 1.6945, 5.8313, 0.1165]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3043, 0.6000, 1.7703, 5.8246, 6.1943]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3729, 0.6000, 1.8607, 5.8018, 6.0367]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4146, 0.6000, 1.9637, 5.7897, 6.1654]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3289, 0.6000, 2.0421, 5.7649, 5.9771]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3518, 0.6000, 2.1201, 5.7244, 5.8048]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3115, 0.6000, 2.1950, 5.7030, 6.0051]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5328, 0.6000, 2.3213, 5.6605, 5.9585]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5964, 0.6000, 2.4627, 5.6133, 5.9610]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2890, 0.6000, 2.5345, 5.6057, 6.1770]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
Predictor Training Loss: 5.688282012939453 KL Loss: 216.6081339518229 CE Loss: 3.522200663884481
Avg wmse 0.07187452167272568 Avg ssim 0.8543404936790466
Predictor Training Loss: 9.01193348566691 KL Loss: 210.99124145507812 CE Loss: 6.902021249135335
Avg wmse 0.1002771258354187 Avg ssim 0.8102466464042664
Predictor Training Loss: 14.394607226053873 KL Loss: 202.99881490071616 CE Loss: 12.364618619283041
Avg wmse 0.15626700222492218 Avg ssim 0.7181891798973083
Predictor Training Loss: 24.55560239156087 KL Loss: 203.02886454264322 CE Loss: 22.525314648946125
Avg wmse 0.21994610130786896 Avg ssim 0.5981627106666565
Predictor Training Loss: 24.378398895263672 KL Loss: 190.9054412841797 CE Loss: 22.46934445699056
Avg wmse 0.23618145287036896 Avg ssim 0.5808843970298767
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2890, 0.6000, 2.5345, 5.6057, 6.1770]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5788, 0.6000, 2.6782, 5.5882, 6.1623]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3443, 0.6000, 2.7605, 5.5629, 5.9847]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5322, 0.6000, 2.8856, 5.5178, 5.9376]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3153, 0.6000, 2.9531, 5.4771, 5.7399]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3587,  0.6000, -0.9971,  1.1790,  3.8951]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4300, 0.6000, 3.0380, 5.4110, 5.6219]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5829,  0.6000,  0.6962, -2.5333,  1.9565]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.0000,  0.6000, -6.8519, -6.8550,  2.8361]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.0000,  0.6000, -5.5289,  6.2351,  2.8790]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.0000,  0.6000, -6.4937,  5.4026,  0.6821]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2669,  0.6000, -6.9092, -6.8209,  2.6048]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2314,  0.6000, -5.5868,  6.2355,  3.1349]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2142,  0.6000, -6.4446,  5.4241,  0.4141]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2680,  0.6000, -6.9574, -6.7744,  2.3742]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2038,  0.6000, -5.6359,  6.2220,  3.4101]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2456,  0.6000, -6.3841,  5.4344,  0.1681]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2622,  0.6000, -6.9927, -6.7191,  2.1396]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2085,  0.6000, -5.6806,  6.1952,  3.6819]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3115,  0.6000, -6.3063,  5.4319,  6.2509]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2867,  0.6000, -7.0174, -6.6518,  1.9221]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2101,  0.6000, -5.7168,  6.1571,  3.9527]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2388,  0.6000, -6.2489,  5.4152,  6.0000]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3232,  0.6000, -7.0302, -6.5721,  1.7299]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3053,  0.6000, -5.7570,  6.0922,  4.1574]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3251,  0.6000, -6.1766,  5.3781,  5.8091]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4812,  0.6000, -7.0590, -6.4552,  1.8124]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2527,  0.6000, -5.7765,  6.0322,  4.3985]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2972,  0.6000, -6.1191,  5.3311,  5.5988]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2736,  0.6000, -7.0600, -6.3869,  1.5857]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2790,  0.6000, -5.7828,  5.9627,  4.6214]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2456,  0.6000, -6.0824,  5.2819,  5.3527]]]], device='cuda:0')
Traceback (most recent call last):
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/train.py", line 368, in <module>
    main()
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/train.py", line 226, in main
    envs.render(ogm_for_vis)
  File "/home/liyiping/dev/MARL2_check_ogm_obst_/CrowdNav_Prediction_AttnGraph/baselines/baselines/common/vec_env/vec_env.py", line 167, in render
    return self.venv.render(mode=mode)
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/dummy_vec_env.py", line 91, in render
    return self.envs[0].render(mode=mode)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/gym/core.py", line 235, in render
    return self.env.render(mode, **kwargs)
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/crowd_sim/envs/crowd_sim_var_num.py", line 1088, in render
    ogm = plt.Rectangle((global_x, global_y), self.cell_length, self.cell_length, fill=True, facecolor='black', alpha=alpha_value, linewidth=0, edgecolor='none',)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/_api/deprecation.py", line 454, in wrapper
    return func(*args, **kwargs)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/patches.py", line 712, in __init__
    super().__init__(**kwargs)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/_api/deprecation.py", line 454, in wrapper
    return func(*args, **kwargs)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/patches.py", line 98, in __init__
    self._internal_update(kwargs)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/artist.py", line 1186, in _internal_update
    return self._update_props(
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/artist.py", line 1162, in _update_props
    ret.append(func(v))
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/patches.py", line 377, in set_alpha
    super().set_alpha(alpha)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/artist.py", line 985, in set_alpha
    self.pchanged()
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/artist.py", line 398, in pchanged
    self._callbacks.process("pchanged")
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/cbook/__init__.py", line 302, in process
    _api.check_in_list(self._signals, signal=s)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/_api/__init__.py", line 127, in check_in_list
    if val not in values:
KeyboardInterrupt
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2415,  0.6000, -7.0460, -6.3281,  1.3368]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2834,  0.6000, -5.7737,  5.8924,  4.8413]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3771,  0.6000, -6.0384,  5.1985,  5.1979]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5427,  0.6000, -7.0093, -6.1975,  1.2969]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4752,  0.6000, -5.7483,  5.7764,  4.9280]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3287,  0.6000, -6.0143,  5.1199,  5.0095]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4700,  0.6000, -6.9675, -6.0877,  1.2067]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4891,  0.6000, -5.7314,  5.6553,  4.8509]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2941,  0.6000, -5.9785,  5.0558,  5.2219]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3694,  0.6000, -6.9212, -6.0078,  1.0465]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4245,  0.6000, -5.7041,  5.5527,  4.9728]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5480,  0.6000, -5.9074,  4.9386,  5.2580]]]], device='cuda:0')