/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/gym/logger.py:30: UserWarning: [33mWARN: Box bound precision lowered by casting to float32
  warnings.warn(colorize('%s: %s'%('WARN', msg % args), 'yellow'))
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/train.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  actor_critic.load_state_dict(torch.load(load_path),strict=False)
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:731: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  robot_vel_pos_list=[torch.tensor(item) for item in self.robot_vel_pos_deque[robot_index]]
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:732: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  lidar_list=[torch.tensor(item) for item in self.lidar_deque[robot_index]]
Loaded the following checkpoint: trained_models/my_model/trans_pos_2/checkpoints/00200.pt
torch.Size([1, 1, 1, 5])
tensor([[[[0.0000, 0.6000, 1.7756, 4.1679, 3.8925]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.0000,  0.6000, -5.8579,  7.1743,  1.9940]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.0000, 0.6000, 1.3529, 6.0638, 2.7743]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2946, 0.6000, 1.7124, 4.1301, 3.6804]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2272,  0.6000, -5.8671,  7.2304,  1.7351]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4878, 0.6000, 1.2428, 6.1163, 2.6964]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3764, 0.6000, 1.6400, 4.0699, 3.8357]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2251,  0.6000, -5.8617,  7.2864,  1.4747]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2776, 0.6000, 1.1751, 6.1315, 2.9202]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4051, 0.6000, 1.5541, 4.0162, 3.7004]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2817,  0.6000, -5.8398,  7.3533,  1.2536]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4130, 0.6000, 1.0723, 6.1410, 3.0501]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3200, 0.6000, 1.4794, 3.9877, 3.5059]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2547,  0.6000, -5.8061,  7.4073,  1.0138]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2978, 0.6000, 0.9983, 6.1322, 3.2599]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4205, 0.6000, 1.3866, 3.9383, 3.6306]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2224,  0.6000, -5.7655,  7.4453,  0.7516]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4744, 0.6000, 0.8822, 6.1080, 3.3472]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2924, 0.6000, 1.3308, 3.8910, 3.8442]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2540,  0.6000, -5.7101,  7.4764,  0.5114]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5459, 0.6000, 0.7498, 6.0751, 3.3848]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2973, 0.6000, 1.2854, 3.8322, 4.0544]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3023,  0.6000, -5.6380,  7.4991,  0.3046]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4513, 0.6000, 0.6437, 6.0368, 3.4881]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3630, 0.6000, 1.2189, 3.7705, 3.8898]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3180,  0.6000, -5.5590,  7.5077,  0.1088]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3023, 0.6000, 0.5794, 5.9971, 3.6948]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3279, 0.6000, 1.1494, 3.7270, 3.7009]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5170,  0.6000, -5.4315,  7.5291,  0.1664]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4990, 0.6000, 0.4689, 5.9392, 3.6246]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3403, 0.6000, 1.0865, 3.6697, 3.8812]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3714,  0.6000, -5.3387,  7.5298,  0.0077]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3566, 0.6000, 0.3980, 5.8851, 3.7936]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3631, 0.6000, 1.0304, 3.5983, 4.0457]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5660,  0.6000, -5.1972,  7.5342,  0.0313]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5959, 0.6000, 0.2794, 5.7950, 3.7908]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4697, 0.6000, 0.9664, 3.4999, 4.1363]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5235,  0.6000, -5.0668,  7.5453,  0.0844]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4868, 0.6000, 0.1885, 5.7140, 3.8694]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3104, 0.6000, 0.9120, 3.4446, 3.9352]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3464,  0.6000, -4.9806,  7.5374,  6.1915]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4415, 0.6000, 0.0985, 5.6501, 3.7593]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5686, 0.6000, 0.8101, 3.3454, 3.9133]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5941,  0.6000, -4.8326,  7.5244,  6.1956]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[5.0420e-01, 6.0000e-01, 8.2908e-04, 5.5704e+00, 3.8259e+00]]]],
       device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5367, 0.6000, 0.7099, 3.2562, 3.8694]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4637,  0.6000, -4.7186,  7.5034,  6.1010]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3829,  0.6000, -0.0816,  5.5217,  3.6751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5414, 0.6000, 0.6053, 3.1703, 3.8287]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4963,  0.6000, -4.5985,  7.4721,  6.0289]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2694,  0.6000, -0.1458,  5.5016,  3.4455]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5510, 0.6000, 0.5018, 3.0794, 3.8627]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4597,  0.6000, -4.4906,  7.4326,  5.9315]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4671,  0.6000, -0.2600,  5.4771,  3.3532]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3528, 0.6000, 0.4266, 3.0333, 3.6910]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5760,  0.6000, -4.3563,  7.3807,  5.9148]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4686,  0.6000, -0.3763,  5.4630,  3.2620]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5192, 0.6000, 0.3199, 2.9595, 3.7471]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2941,  0.6000, -4.2837,  7.3693,  6.1272]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2775,  0.6000, -0.4416,  5.4396,  3.4860]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4628, 0.6000, 0.2189, 2.9030, 3.6518]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4213,  0.6000, -4.1784,  7.3659,  6.2513]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4541,  0.6000, -0.5441,  5.3906,  3.5873]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3900, 0.6000, 0.1417, 2.8435, 3.7976]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4811,  0.6000, -4.0589,  7.3522,  6.1687]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2636,  0.6000, -0.5954,  5.3492,  3.8209]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3084, 0.6000, 0.0913, 2.7851, 4.0001]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5151,  0.6000, -3.9321,  7.3300,  6.1097]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5027,  0.6000, -0.6876,  5.2638,  3.8885]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3740, 0.6000, 0.0420, 2.7057, 4.1571]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4184,  0.6000, -3.8276,  7.3250,  6.2358]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5815,  0.6000, -0.7955,  5.1665,  3.8756]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4115,  0.6000, -0.0232,  2.6261,  4.0261]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4007,  0.6000, -3.7291,  7.3065,  6.0974]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3772,  0.6000, -0.8550,  5.0933,  4.0304]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5901,  0.6000, -0.1159,  2.5113,  4.0330]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3883,  0.6000, -3.6374,  7.2748,  5.9504]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3548,  0.6000, -0.9217,  5.0349,  3.8601]]]], device='cuda:0')
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:797: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  robot_vel_pos_list=[torch.tensor(item) for item in self.robot_vel_pos_deque[robot_index]]
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:798: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  lidar_list=[torch.tensor(item) for item in self.lidar_deque[robot_index]]
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3430,  0.6000, -0.1570,  2.4361,  4.2115]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3266,  0.6000, -3.5666,  7.2340,  5.7605]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5068,  0.6000, -1.0223,  4.9578,  3.7954]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3165,  0.6000, -0.2079,  2.3755,  4.0146]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4182,  0.6000, -3.4833,  7.1709,  5.6342]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3687,  0.6000, -1.0856,  4.8908,  3.9560]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3754,  0.6000, -0.2563,  2.2951,  4.1706]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4143,  0.6000, -3.4096,  7.0982,  5.5053]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5303,  0.6000, -1.1811,  4.7988,  3.9076]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5265,  0.6000, -0.3183,  2.1790,  4.2216]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5593,  0.6000, -3.3072,  7.0029,  5.5335]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4031,  0.6000, -1.2626,  4.7395,  3.7709]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4751,  0.6000, -0.3831,  2.0795,  4.1349]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3007,  0.6000, -3.2428,  6.9641,  5.7414]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2754,  0.6000, -1.3259,  4.7125,  3.5455]]]], device='cuda:0')
Predictor Training Loss: 23.116543451944988 KL Loss: 264.3494466145833 CE Loss: 20.47304916381836
Avg wmse 0.22345471382141113 Avg ssim 0.5885760188102722
Predictor Training Loss: 17.69109344482422 KL Loss: 251.30223083496094 CE Loss: 15.178071022033691
Avg wmse 0.1723259687423706 Avg ssim 0.6831417679786682
Predictor Training Loss: 14.203172365824381 KL Loss: 234.23782857259116 CE Loss: 11.860793749491373
Avg wmse 0.1515607088804245 Avg ssim 0.7356812357902527
Predictor Training Loss: 29.52229913075765 KL Loss: 227.0027109781901 CE Loss: 27.252271334330242
Avg wmse 0.23579077422618866 Avg ssim 0.5585355162620544
Predictor Training Loss: 29.37675603230794 KL Loss: 225.18760681152344 CE Loss: 27.124879837036133
Avg wmse 0.2202204465866089 Avg ssim 0.5889340043067932
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4751,  0.6000, -0.3831,  2.0795,  4.1349]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3007,  0.6000, -3.2428,  6.9641,  5.7414]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2754,  0.6000, -1.3259,  4.7125,  3.5455]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4870,  0.6000, -0.4574,  1.9830,  4.0564]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5863,  0.6000, -3.1165,  6.8898,  5.7509]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4033,  0.6000, -1.4232,  4.6858,  3.4089]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5427,  0.6000, -0.5444,  1.8789,  4.0166]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4385,  0.6000, -3.0164,  6.8450,  5.8631]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5364,  0.6000, -1.5539,  4.6562,  3.3647]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4948,  0.6000, -0.6165,  1.7784,  4.0896]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3534,  0.6000, -2.9431,  6.7958,  5.6918]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5644,  0.6000, -1.6907,  4.6215,  3.3895]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5119,  0.6000, -0.6847,  1.6701,  4.1508]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3560,  0.6000, -2.8786,  6.7344,  5.5224]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5637,  0.6000, -1.8281,  4.5904,  3.3643]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5538,  0.6000, -2.7753,  6.6422,  5.5545]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2811,  0.6000, -1.8916,  4.5602,  3.5857]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2432,  0.6000, -2.7214,  6.6141,  5.8022]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3370,  0.6000, -1.9598,  4.5108,  3.7684]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3466,  0.6000, -2.6388,  6.5881,  5.9782]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3005,  0.6000, -2.0103,  4.4551,  3.9763]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4380,  0.6000, -2.5313,  6.5671,  6.0907]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5788,  0.6000, -2.1058,  4.3465,  3.9911]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3683,  0.6000, -2.4393,  6.5642,  6.2517]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5363,  0.6000, -2.1898,  4.2420,  4.0353]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2436,  0.6000, -2.3807,  6.5475,  6.0041]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3404,  0.6000, -2.2542,  4.1863,  3.8551]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5094,  0.6000, -2.2563,  6.5201,  6.0670]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5434,  0.6000, -2.3603,  4.1015,  3.8158]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4691,  0.6000, -2.1400,  6.5055,  6.1579]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3743,  0.6000, -2.4234,  4.0324,  3.9725]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5449,  0.6000, -2.0043,  6.4937,  6.1962]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4922,  0.6000, -2.5129,  3.9480,  3.8976]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3083,  0.6000, -1.9304,  6.4716,  5.9936]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3056,  0.6000, -2.5780,  3.9079,  3.6932]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4640,  0.6000, -1.8166,  6.4492,  6.0881]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5670,  0.6000, -2.6970,  3.8309,  3.7161]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3124,  0.6000, -1.7445,  6.4191,  5.8883]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5013,  0.6000, -2.8066,  3.7701,  3.6475]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2945,  0.6000, -1.6840,  6.3771,  5.6762]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4097,  0.6000, -2.9020,  3.7327,  3.5154]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3214,  0.6000, -1.6104,  6.3448,  5.8697]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5406,  0.6000, -3.0257,  3.6782,  3.5566]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5984,  0.6000, -1.4734,  6.2849,  5.8707]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2848,  0.6000, -3.0830,  3.6361,  3.7755]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4883,  0.6000, -1.3657,  6.2274,  5.7932]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4350,  0.6000, -3.1774,  3.5821,  3.6609]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4968,  0.6000, -1.2522,  6.1770,  5.8648]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4283,  0.6000, -3.2761,  3.5404,  3.5417]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4856,  0.6000, -1.1377,  6.1366,  5.9443]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4933,  0.6000, -3.3929,  3.5009,  3.4677]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4506,  0.6000, -1.0359,  6.0883,  5.8406]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3582,  0.6000, -3.4717,  3.4584,  3.6356]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2690,  0.6000, -0.9833,  6.0465,  5.6107]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5623,  0.6000, -3.5972,  3.3950,  3.6094]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5094,  0.6000, -0.8789,  5.9736,  5.6737]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3910,  0.6000, -3.6772,  3.3388,  3.7545]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5300,  0.6000, -0.7741,  5.8925,  5.6251]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4452,  0.6000, -3.7608,  3.2654,  3.8620]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3726,  0.6000, -0.6923,  5.8478,  5.7830]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5316,  0.6000, -3.8647,  3.1826,  3.8145]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3214,  0.6000, -0.6157,  5.8236,  5.9764]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3656,  0.6000, -3.9445,  3.1379,  3.6517]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3597,  0.6000, -0.5267,  5.8110,  6.1433]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4667,  0.6000, -4.0511,  3.0906,  3.5592]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2938,  0.6000, -0.4534,  5.8164,  0.0728]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5364,  0.6000, -4.1760,  3.0417,  3.5150]]]], device='cuda:0')
Predictor Training Loss: 11.728043874104818 KL Loss: 231.17902119954428 CE Loss: 9.416253725687662
Avg wmse 0.12066938728094101 Avg ssim 0.5390366911888123
Predictor Training Loss: 16.07755438486735 KL Loss: 230.4371795654297 CE Loss: 13.773182074228922
Avg wmse 0.1590292602777481 Avg ssim 0.6012545228004456
Predictor Training Loss: 24.721124013264973 KL Loss: 240.7946523030599 CE Loss: 22.313177744547527
Avg wmse 0.2142743617296219 Avg ssim 0.5778470635414124
Predictor Training Loss: 21.641806920369465 KL Loss: 209.36833699544272 CE Loss: 19.548123677571613
Avg wmse 0.18452243506908417 Avg ssim 0.6453368663787842
Predictor Training Loss: 16.076764742533367 KL Loss: 200.46052042643228 CE Loss: 14.072160085042318
Avg wmse 0.14018172025680542 Avg ssim 0.7442658543586731
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2938,  0.6000, -0.4534,  5.8164,  0.0728]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5364,  0.6000, -4.1760,  3.0417,  3.5150]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3668,  0.6000, -0.3621,  5.8082,  6.1940]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3174,  0.6000, -4.2541,  3.0277,  3.3187]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3242,  0.6000, -0.2815,  5.8165,  0.1024]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3503,  0.6000, -4.3364,  2.9976,  3.4922]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3173,  0.6000, -0.2025,  5.8091,  6.1893]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5950,  0.6000, -4.4759,  2.9461,  3.4956]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3094,  0.6000, -0.1256,  5.8174,  0.1079]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3150,  0.6000, -4.5429,  2.9048,  3.6935]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4292,  0.6000, -0.0183,  5.8162,  6.2725]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4525,  0.6000, -4.6327,  2.8359,  3.7960]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2951, 0.6000, 0.0537, 5.8000, 6.0607]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4125,  0.6000, -4.7057,  2.7631,  3.9262]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4575, 0.6000, 0.1672, 5.7859, 6.1596]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3591,  0.6000, -4.7789,  2.7111,  3.7589]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3757, 0.6000, 0.2611, 5.7889, 0.0322]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5000,  0.6000, -4.8755,  2.6319,  3.8283]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5213, 0.6000, 0.3914, 5.7860, 6.2608]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3740,  0.6000, -4.9377,  2.5620,  3.9853]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4827, 0.6000, 0.5114, 5.7735, 6.1793]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5872,  0.6000, -5.0363,  2.4532,  3.9763]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3741, 0.6000, 0.6048, 5.7784, 0.0530]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4227,  0.6000, -5.1163,  2.3842,  3.8532]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4891, 0.6000, 0.7260, 5.7943, 0.1301]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2865,  0.6000, -5.1793,  2.3502,  3.6355]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4770, 0.6000, 0.8452, 5.7996, 0.0447]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3106,  0.6000, -5.2390,  2.3005,  3.8365]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2585, 0.6000, 0.9086, 5.7872, 6.0907]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3387,  0.6000, -5.3128,  2.2589,  3.6551]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4450, 0.6000, 1.0194, 5.7778, 6.1983]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5594, 0.6000, 1.1591, 5.7699, 6.2265]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3968, 0.6000, 1.2563, 5.7504, 6.0854]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3927, 0.6000, 1.3544, 5.7451, 6.2293]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5283, 0.6000, 1.4865, 5.7446, 6.2791]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4212, 0.6000, 1.5910, 5.7572, 0.1201]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4385, 0.6000, 1.6977, 5.7824, 0.2323]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3005, 0.6000, 1.7728, 5.7842, 0.0243]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3360, 0.6000, 1.8557, 5.7709, 6.1241]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4059, 0.6000, 1.9572, 5.7685, 6.2589]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3394, 0.6000, 2.0403, 5.7512, 6.0780]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3610, 0.6000, 2.1244, 5.7184, 5.9120]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3034, 0.6000, 2.1992, 5.7060, 6.1180]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5508, 0.6000, 2.3341, 5.6787, 6.0838]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5992, 0.6000, 2.4810, 5.6491, 6.0844]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2954, 0.6000, 2.5548, 5.6501, 0.0127]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
Predictor Training Loss: 5.938784917195638 KL Loss: 225.12420654296875 CE Loss: 3.687542676925659
Avg wmse 0.032381828874349594 Avg ssim 0.8049067854881287
Predictor Training Loss: 11.490664005279541 KL Loss: 209.8009999593099 CE Loss: 9.392654180526733
Avg wmse 0.1049671545624733 Avg ssim 0.7349362373352051
Predictor Training Loss: 19.989452997843426 KL Loss: 190.48141479492188 CE Loss: 18.084639231363933
Avg wmse 0.2028125375509262 Avg ssim 0.5824962854385376
Predictor Training Loss: 12.532883326212565 KL Loss: 209.97907511393228 CE Loss: 10.433092753092447
Avg wmse 0.1487324833869934 Avg ssim 0.7324054837226868
Predictor Training Loss: 9.410155296325684 KL Loss: 198.94573465983072 CE Loss: 7.420698006947835
Avg wmse 0.11759486049413681 Avg ssim 0.8094266057014465
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.2954, 0.6000, 2.5548, 5.6501, 0.0127]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.5148, 0.6000, 2.6834, 5.6441, 6.2367]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3320, 0.6000, 2.7641, 5.6249, 6.0506]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4901, 0.6000, 2.8809, 5.5877, 5.9743]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.3055, 0.6000, 2.9474, 5.5502, 5.7698]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5651,  0.6000, -0.7570,  1.5487,  4.1751]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[0.4185, 0.6000, 3.0313, 5.4877, 5.6437]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4417,  0.6000, -5.4143,  2.2156,  3.5451]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.0000,  0.6000, -6.8519, -6.8550,  4.0065]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.0000,  0.6000, -5.0156, -3.5431,  3.8908]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.0000,  0.6000, -6.1950, -7.6544,  3.4400]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2240,  0.6000, -6.8980, -6.8868,  3.7454]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2105,  0.6000, -5.0623, -3.5673,  3.6203]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2142,  0.6000, -6.2485, -7.6560,  3.1720]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2144,  0.6000, -6.9486, -6.9045,  3.4777]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2144,  0.6000, -5.1147, -3.5785,  3.3525]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2415,  0.6000, -6.3074, -7.6430,  2.9231]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2157,  0.6000, -7.0024, -6.9082,  3.2108]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2153,  0.6000, -5.1684, -3.5755,  3.0854]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3007,  0.6000, -6.3759, -7.6119,  2.7152]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2308,  0.6000, -7.0591, -6.8975,  2.9544]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2309,  0.6000, -5.2234, -3.5578,  2.8291]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2373,  0.6000, -6.4221, -7.5746,  2.4633]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2507,  0.6000, -7.1160, -6.8714,  2.7118]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2015,  0.6000, -5.2652, -3.5298,  2.5523]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3304,  0.6000, -6.4756, -7.5118,  2.2761]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4229,  0.6000, -7.2060, -6.8158,  2.5888]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2262,  0.6000, -5.3026, -3.4873,  2.2928]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2977,  0.6000, -6.5110, -7.4463,  2.0662]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2403,  0.6000, -7.2478, -6.7726,  2.3390]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2318,  0.6000, -5.3287, -3.4356,  2.0371]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2441,  0.6000, -6.5260, -7.3871,  1.8191]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2208,  0.6000, -7.2745, -6.7243,  2.0757]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2580,  0.6000, -5.3433, -3.3727,  1.7996]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3623,  0.6000, -6.5335, -7.2969,  1.6540]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3423,  0.6000, -7.3019, -6.6433,  1.8968]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2332,  0.6000, -5.3418, -3.3144,  1.5449]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3114,  0.6000, -6.5244, -7.2195,  1.4536]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3240,  0.6000, -7.3127, -6.5630,  1.7051]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2313,  0.6000, -5.3257, -3.2589,  1.2889]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3139,  0.6000, -6.5308, -7.1413,  1.6523]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
Traceback (most recent call last):
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/train.py", line 368, in <module>
    main()
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/train.py", line 226, in main
    envs.render(ogm_for_vis)
  File "/home/liyiping/dev/MARL2_check_ogm_obst_/CrowdNav_Prediction_AttnGraph/baselines/baselines/common/vec_env/vec_env.py", line 167, in render
    return self.venv.render(mode=mode)
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/dummy_vec_env.py", line 91, in render
    return self.envs[0].render(mode=mode)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/gym/core.py", line 235, in render
    return self.env.render(mode, **kwargs)
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/crowd_sim/envs/crowd_sim_var_num.py", line -1, in render
KeyboardInterrupt
tensor([[[[ 0.2886,  0.6000, -7.3068, -6.4911,  1.4889]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.2971,  0.6000, -5.2906, -3.1934,  1.0785]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5847,  0.6000, -6.5412, -6.9955,  1.6417]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5011,  0.6000, -7.2880, -6.3672,  1.4202]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5066,  0.6000, -5.2236, -3.0859,  1.0137]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5924,  0.6000, -6.5509, -6.8477,  1.6364]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.4452,  0.6000, -7.2596, -6.2596,  1.3127]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.3228,  0.6000, -5.1687, -3.0269,  0.8212]]]], device='cuda:0')
torch.Size([1, 1, 1, 5])
tensor([[[[ 0.5913,  0.6000, -6.5597, -6.7002,  1.6303]]]], device='cuda:0')