/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/gym/logger.py:30: UserWarning: [33mWARN: Box bound precision lowered by casting to float32
  warnings.warn(colorize('%s: %s'%('WARN', msg % args), 'yellow'))
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/train.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  actor_critic.load_state_dict(torch.load(load_path),strict=False)
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:880: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  robot_vel_pos_list=[torch.tensor(item).clone().detach() for item in self.robot_vel_pos_deque[robot_index]]
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:882: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  lidar_list=[torch.tensor(item).clone().detach() for item in self.lidar_deque[robot_index]]
Logging to /tmp/openai-2024-09-05-16-35-50-424291
Creating dummy env object to get spaces
Loaded the following checkpoint: trained_models/my_model/holonomic/checkpoints/35600.pt
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:942: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  robot_vel_pos_list=[torch.tensor(item).clone().detach() for item in self.robot_vel_pos_deque[robot_index]]
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:943: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  lidar_list=[torch.tensor(item).clone().detach() for item in self.lidar_deque[robot_index]]
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 12668.504557291666 KL Loss: 62476.69873046875 CE Loss: 12043.737630208334
Avg wmse 0.24550066888332367 Avg ssim 0.0036551281809806824
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 11658.457356770834 KL Loss: 796.3121948242188 CE Loss: 11650.494140625
Avg wmse 0.2482769638299942 Avg ssim 0.003188514383509755
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 11043.1318359375 KL Loss: 849.4255574544271 CE Loss: 11034.6376953125
Avg wmse 0.25012463331222534 Avg ssim 0.003219549311324954
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 10403.463541666666 KL Loss: 290.32456461588544 CE Loss: 10400.560221354166
Avg wmse 0.24704188108444214 Avg ssim 0.0037618353962898254
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 9908.650390625 KL Loss: 901.435791015625 CE Loss: 9899.636393229166
Avg wmse 0.25519034266471863 Avg ssim 0.003295730799436569
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 9195.372721354166 KL Loss: 267.4701385498047 CE Loss: 9192.697916666666
Avg wmse 0.2373853176832199 Avg ssim 0.005518505349755287
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 8593.754557291666 KL Loss: 162.43460083007812 CE Loss: 8592.1298828125
Avg wmse 0.2334582358598709 Avg ssim 0.0062971641309559345
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 8260.376953125 KL Loss: 1348.3421325683594 CE Loss: 8246.893717447916
Avg wmse 0.2404419630765915 Avg ssim 0.005825532600283623
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 7904.653483072917 KL Loss: 3922.9267374674478 CE Loss: 7865.424153645833
Avg wmse 0.2643313705921173 Avg ssim 0.004376574885100126
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 6972.735677083333 KL Loss: 783.2741394042969 CE Loss: 6964.902994791667
Avg wmse 0.24409794807434082 Avg ssim 0.007720420602709055
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 6451.355631510417 KL Loss: 484.5340067545573 CE Loss: 6446.51025390625
Avg wmse 0.24695105850696564 Avg ssim 0.007782550994306803
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 6103.375162760417 KL Loss: 734.3599090576172 CE Loss: 6096.031575520833
Avg wmse 0.25142979621887207 Avg ssim 0.007991758175194263
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 5758.993815104167 KL Loss: 640.0215861002604 CE Loss: 5752.59375
Avg wmse 0.25471439957618713 Avg ssim 0.008573631756007671
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 5415.684407552083 KL Loss: 482.1678517659505 CE Loss: 5410.862955729167
Avg wmse 0.26141902804374695 Avg ssim 0.009550814516842365
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 5037.868977864583 KL Loss: 982.2895711263021 CE Loss: 5028.046223958333
Avg wmse 0.2890125811100006 Avg ssim 0.008597414009273052
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 4806.025065104167 KL Loss: 2133.50048828125 CE Loss: 4784.690104166667
Avg wmse 0.30502989888191223 Avg ssim 0.007655108813196421
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 4518.98974609375 KL Loss: 666.4312082926432 CE Loss: 4512.325358072917
Avg wmse 0.2993558347225189 Avg ssim 0.009350653737783432
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 4212.766438802083 KL Loss: 520.4459940592448 CE Loss: 4207.56201171875
Avg wmse 0.3111634850502014 Avg ssim 0.00915813073515892
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 5981.918375651042 KL Loss: 53218.48398844401 CE Loss: 5449.733561197917
Avg wmse 0.3136787712574005 Avg ssim 0.006068304181098938
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 3985.5360514322915 KL Loss: 258.48660532633465 CE Loss: 3982.951171875
Avg wmse 0.30538511276245117 Avg ssim 0.010399031452834606
Traceback (most recent call last):
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/train.py", line 368, in <module>
    main()
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/train.py", line 294, in main
    value_loss, action_loss, dist_entropy = agent.update(all_rollouts[robot_index],robot_index)
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/rl/ppo/ppo.py", line 66, in update
    values, action_log_probs, dist_entropy, _ = self.actor_critic.evaluate_actions(
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/rl/networks/model.py", line 85, in evaluate_actions
    value, actor_features, rnn_hxs,_= self.base(inputs, rnn_hxs, masks,robot_index)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py", line 960, in forward
    static_map,dynamic_map=transform_ogm(past_lidar, past_robot_vel_pos,x_odom, y_odom, theta_odom,map_size=32)
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py", line 287, in transform_ogm
    static_obst, dynamic_obst=convert_lidar_to_ogm(lidar_data,map_size)
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py", line 308, in convert_lidar_to_ogm
    y_indices = (distances * torch.sin(angles)).long() + center_index
KeyboardInterrupt
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 3833.79052734375 KL Loss: 103.57945505777995 CE Loss: 3832.7547200520835
Avg wmse 0.29438653588294983 Avg ssim 0.014017193578183651
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])
Predictor Training Loss: 3581.62841796875 KL Loss: 164.7383550008138 CE Loss: 3579.9810384114585
Avg wmse 0.3120429515838623 Avg ssim 0.013835273683071136
torch.Size([1, 16, 1, 5]) torch.Size([1, 16, 90, 2]) torch.Size([1, 16, 1, 5])