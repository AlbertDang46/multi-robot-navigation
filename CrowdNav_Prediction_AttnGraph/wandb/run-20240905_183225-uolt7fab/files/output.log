Logging to /tmp/openai-2024-09-05-18-32-28-894369
Creating dummy env object to get spaces
Loaded the following checkpoint: trained_models/my_model/holonomic/checkpoints/35600.pt
/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/gym/logger.py:30: UserWarning: [33mWARN: Box bound precision lowered by casting to float32
  warnings.warn(colorize('%s: %s'%('WARN', msg % args), 'yellow'))
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/train.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  actor_critic.load_state_dict(torch.load(load_path),strict=False)
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:878: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  robot_vel_pos_list=[torch.tensor(item).clone().detach() for item in self.robot_vel_pos_deque[robot_index]]
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:880: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  lidar_list=[torch.tensor(item).clone().detach() for item in self.lidar_deque[robot_index]]
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:940: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  robot_vel_pos_list=[torch.tensor(item).clone().detach() for item in self.robot_vel_pos_deque[robot_index]]
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos_middle_fusion_coordination/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:941: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  lidar_list=[torch.tensor(item).clone().detach() for item in self.lidar_deque[robot_index]]
Predictor Training Loss: 12494.546549479166 KL Loss: 9831.632232666016 CE Loss: 12396.230143229166
Avg wmse 0.2461426705121994 Avg ssim 0.0052991569973528385
Predictor Training Loss: 11695.443684895834 KL Loss: 12977.867431640625 CE Loss: 11565.6650390625
Avg wmse 0.24767406284809113 Avg ssim 0.0049208165146410465
Predictor Training Loss: 11330.819010416666 KL Loss: 10877.514017740885 CE Loss: 11222.044270833334
Avg wmse 0.2458629459142685 Avg ssim 0.005427991505712271
Predictor Training Loss: 10547.0029296875 KL Loss: 890.0411885579427 CE Loss: 10538.1025390625
Avg wmse 0.24077731370925903 Avg ssim 0.0064270407892763615
Predictor Training Loss: 9888.033203125 KL Loss: 442.1183166503906 CE Loss: 9883.611979166666
Avg wmse 0.23642289638519287 Avg ssim 0.00781572237610817
Predictor Training Loss: 9208.857747395834 KL Loss: 324.8700358072917 CE Loss: 9205.609049479166
Avg wmse 0.2296999841928482 Avg ssim 0.01004842109978199
Predictor Training Loss: 8692.244140625 KL Loss: 798.3817749023438 CE Loss: 8684.260416666666
Avg wmse 0.23317307233810425 Avg ssim 0.009613361209630966
Predictor Training Loss: 8046.56396484375 KL Loss: 393.1370086669922 CE Loss: 8042.632649739583
Avg wmse 0.22791433334350586 Avg ssim 0.011503878980875015
Predictor Training Loss: 7480.140625 KL Loss: 858.4510294596354 CE Loss: 7471.555989583333
Avg wmse 0.24207453429698944 Avg ssim 0.010539264418184757
Predictor Training Loss: 7069.951009114583 KL Loss: 1489.050801595052 CE Loss: 7055.060384114583
