/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/gym/logger.py:30: UserWarning: [33mWARN: Box bound precision lowered by casting to float32
  warnings.warn(colorize('%s: %s'%('WARN', msg % args), 'yellow'))
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/train.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  actor_critic.load_state_dict(torch.load(load_path),strict=False)
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:731: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  robot_vel_pos_list=[torch.tensor(item) for item in self.robot_vel_pos_deque[robot_index]]
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:732: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  lidar_list=[torch.tensor(item) for item in self.lidar_deque[robot_index]]
Loaded the following checkpoint: trained_models/my_model/trans_pos_2/checkpoints/00200.pt
0 tensor([[[[0.0000, 0.6000, 1.7756, 4.1679, 3.8925]]]], device='cuda:0')
1 tensor([[[[ 0.0000,  0.6000, -2.9224, -4.3997,  0.0357]]]], device='cuda:0')
2 tensor([[[[ 0.0000,  0.6000, -5.0596,  0.4525,  5.9192]]]], device='cuda:0')
0 tensor([[[[0.2969, 0.6000, 1.7119, 4.1297, 3.6821]]]], device='cuda:0')
1 tensor([[[[ 0.3275,  0.6000, -2.8426, -4.3815,  0.2249]]]], device='cuda:0')
2 tensor([[[[ 0.3404,  0.6000, -4.9868,  0.4084,  5.7390]]]], device='cuda:0')
0 tensor([[[[0.3765, 0.6000, 1.6397, 4.0693, 3.8373]]]], device='cuda:0')
1 tensor([[[[ 0.2851,  0.6000, -2.7782, -4.3509,  0.4436]]]], device='cuda:0')
2 tensor([[[[ 0.4632,  0.6000, -4.8939,  0.3393,  5.6440]]]], device='cuda:0')
0 tensor([[[[0.3902, 0.6000, 1.5565, 4.0184, 3.6916]]]], device='cuda:0')
1 tensor([[[[ 0.2453,  0.6000, -2.7309, -4.3118,  0.6899]]]], device='cuda:0')
2 tensor([[[[ 0.2801,  0.6000, -4.8483,  0.2862,  5.4218]]]], device='cuda:0')
0 tensor([[[[0.3266, 0.6000, 1.4801, 3.9896, 3.5017]]]], device='cuda:0')
1 tensor([[[[ 0.3435,  0.6000, -2.6754, -4.2463,  0.8681]]]], device='cuda:0')
2 tensor([[[[ 0.4714,  0.6000, -4.7798,  0.1903,  5.3325]]]], device='cuda:0')
0 tensor([[[[0.4117, 0.6000, 1.3893, 3.9411, 3.6325]]]], device='cuda:0')
1 tensor([[[[ 0.3521,  0.6000, -2.6079, -4.1899,  0.6959]]]], device='cuda:0')
2 tensor([[[[ 0.3556,  0.6000, -4.7411,  0.1103,  5.1628]]]], device='cuda:0')
0 tensor([[[[0.2854, 0.6000, 1.3352, 3.8946, 3.8509]]]], device='cuda:0')
1 tensor([[[[ 0.5012,  0.6000, -2.5064, -4.1163,  0.6273]]]], device='cuda:0')
2 tensor([[[[ 0.4047,  0.6000, -4.7097,  0.0141,  5.0271]]]], device='cuda:0')
0 tensor([[[[0.2933, 0.6000, 1.2909, 3.8361, 4.0639]]]], device='cuda:0')
1 tensor([[[[ 0.5559,  0.6000, -2.3965, -4.0314,  0.6579]]]], device='cuda:0')
2 tensor([[[[ 0.5941,  0.6000, -4.6632, -0.1270,  5.0313]]]], device='cuda:0')
0 tensor([[[[0.3660, 0.6000, 1.2245, 3.7731, 3.9014]]]], device='cuda:0')
1 tensor([[[[ 0.5772,  0.6000, -2.2809, -3.9450,  0.6420]]]], device='cuda:0')
2 tensor([[[[ 0.3127,  0.6000, -4.6244, -0.1949,  5.2308]]]], device='cuda:0')
0 tensor([[[[0.3289, 0.6000, 1.1554, 3.7286, 3.7132]]]], device='cuda:0')
1 tensor([[[[ 0.3203,  0.6000, -2.2272, -3.8855,  0.8363]]]], device='cuda:0')
2 tensor([[[[ 0.5155,  0.6000, -4.5673, -0.3104,  5.1721]]]], device='cuda:0')
0 tensor([[[[0.3368, 0.6000, 1.0940, 3.6710, 3.8959]]]], device='cuda:0')
1 tensor([[[[ 0.5790,  0.6000, -2.1287, -3.7795,  0.8217]]]], device='cuda:0')
2 tensor([[[[ 0.3435,  0.6000, -4.5161, -0.3794,  5.3503]]]], device='cuda:0')
0 tensor([[[[0.3559, 0.6000, 1.0404, 3.6000, 4.0654]]]], device='cuda:0')
1 tensor([[[[ 0.4111,  0.6000, -2.0691, -3.6958,  0.9529]]]], device='cuda:0')
2 tensor([[[[ 0.5709,  0.6000, -4.4288, -0.4923,  5.3705]]]], device='cuda:0')
0 tensor([[[[0.4567, 0.6000, 0.9810, 3.5025, 4.1650]]]], device='cuda:0')
1 tensor([[[[ 0.4196,  0.6000, -2.0195, -3.6033,  1.0782]]]], device='cuda:0')
2 tensor([[[[ 0.4596,  0.6000, -4.3500, -0.5759,  5.4680]]]], device='cuda:0')
0 tensor([[[[0.3152, 0.6000, 0.9275, 3.4446, 3.9672]]]], device='cuda:0')
1 tensor([[[[ 0.3816,  0.6000, -1.9622, -3.5271,  0.9265]]]], device='cuda:0')
2 tensor([[[[ 0.4573,  0.6000, -4.2803, -0.6665,  5.3689]]]], device='cuda:0')
0 tensor([[[[0.5814, 0.6000, 0.8276, 3.3390, 3.9542]]]], device='cuda:0')
1 tensor([[[[ 0.5175,  0.6000, -1.8906, -3.4193,  0.9838]]]], device='cuda:0')
2 tensor([[[[ 0.4967,  0.6000, -4.1976, -0.7592,  5.4406]]]], device='cuda:0')
0 tensor([[[[0.5446, 0.6000, 0.7302, 3.2438, 3.9158]]]], device='cuda:0')
1 tensor([[[[ 0.5341,  0.6000, -1.8116, -3.3116,  0.9381]]]], device='cuda:0')
2 tensor([[[[ 0.3824,  0.6000, -4.1455, -0.8393,  5.2895]]]], device='cuda:0')
0 tensor([[[[0.5419, 0.6000, 0.6296, 3.1531, 3.8754]]]], device='cuda:0')
1 tensor([[[[ 0.5649,  0.6000, -1.7253, -3.1998,  0.9137]]]], device='cuda:0')
2 tensor([[[[ 0.2673,  0.6000, -4.1228, -0.9021,  5.0584]]]], device='cuda:0')
0 tensor([[[[0.5498, 0.6000, 0.5308, 3.0576, 3.9103]]]], device='cuda:0')
1 tensor([[[[ 0.5127,  0.6000, -1.6410, -3.1033,  0.8531]]]], device='cuda:0')
2 tensor([[[[ 0.4417,  0.6000, -4.0970, -1.0095,  4.9485]]]], device='cuda:0')
0 tensor([[[[0.3527, 0.6000, 0.4579, 3.0080, 3.7386]]]], device='cuda:0')
1 tensor([[[[ 0.5675,  0.6000, -1.5502, -2.9943,  0.8757]]]], device='cuda:0')
2 tensor([[[[ 0.4420,  0.6000, -4.0830, -1.1191,  4.8388]]]], device='cuda:0')
0 tensor([[[[0.5200, 0.6000, 0.3546, 2.9291, 3.7941]]]], device='cuda:0')
1 tensor([[[[ 0.2858,  0.6000, -1.5174, -2.9308,  1.0939]]]], device='cuda:0')
2 tensor([[[[ 0.2832,  0.6000, -4.0590, -1.1857,  5.0588]]]], device='cuda:0')
0 tensor([[[[0.4612, 0.6000, 0.2567, 2.8682, 3.6978]]]], device='cuda:0')
1 tensor([[[[ 0.3963,  0.6000, -1.4848, -2.8373,  1.2354]]]], device='cuda:0')
2 tensor([[[[ 0.4740,  0.6000, -4.0092, -1.2932,  5.1463]]]], device='cuda:0')
0 tensor([[[[0.3909, 0.6000, 0.1820, 2.8051, 3.8430]]]], device='cuda:0')
1 tensor([[[[ 0.4783,  0.6000, -1.4360, -2.7281,  1.1509]]]], device='cuda:0')
2 tensor([[[[ 0.2672,  0.6000, -3.9680, -1.3458,  5.3774]]]], device='cuda:0')
0 tensor([[[[0.3144, 0.6000, 0.1331, 2.7436, 4.0413]]]], device='cuda:0')
1 tensor([[[[ 0.4829,  0.6000, -1.3780, -2.6222,  1.0696]]]], device='cuda:0')
2 tensor([[[[ 0.5281,  0.6000, -3.8814, -1.4455,  5.4273]]]], device='cuda:0')
0 tensor([[[[0.3896, 0.6000, 0.0843, 2.6593, 4.1874]]]], device='cuda:0')
1 tensor([[[[ 0.4378,  0.6000, -1.3365, -2.5209,  1.1822]]]], device='cuda:0')
2 tensor([[[[ 0.5743,  0.6000, -3.7892, -1.5556,  5.4094]]]], device='cuda:0')
0 tensor([[[[0.4130, 0.6000, 0.0214, 2.5774, 4.0575]]]], device='cuda:0')
1 tensor([[[[ 0.3936,  0.6000, -1.2866, -2.4361,  1.0388]]]], device='cuda:0')
2 tensor([[[[ 0.3596,  0.6000, -3.7209, -1.6140,  5.5764]]]], device='cuda:0')
0 tensor([[[[ 0.5854,  0.6000, -0.0665,  2.4604,  4.0677]]]], device='cuda:0')
1 tensor([[[[ 0.3817,  0.6000, -1.2264, -2.3621,  0.8872]]]], device='cuda:0')
2 tensor([[[[ 0.3568,  0.6000, -3.6638, -1.6825,  5.4075]]]], device='cuda:0')
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:797: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  robot_vel_pos_list=[torch.tensor(item) for item in self.robot_vel_pos_deque[robot_index]]
/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/ogm_rnn.py:798: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  lidar_list=[torch.tensor(item) for item in self.lidar_deque[robot_index]]
0 tensor([[[[ 0.3355,  0.6000, -0.1038,  2.3853,  4.2514]]]], device='cuda:0')
1 tensor([[[[ 0.3233,  0.6000, -1.1643, -2.3104,  0.6951]]]], device='cuda:0')
2 tensor([[[[ 0.5171,  0.6000, -3.5868, -1.7863,  5.3499]]]], device='cuda:0')
0 tensor([[[[ 0.3160,  0.6000, -0.1521,  2.3228,  4.0541]]]], device='cuda:0')
1 tensor([[[[ 0.4258,  0.6000, -1.0749, -2.2526,  0.5741]]]], device='cuda:0')
2 tensor([[[[ 0.3549,  0.6000, -3.5227, -1.8477,  5.5201]]]], device='cuda:0')
0 tensor([[[[ 0.3768,  0.6000, -0.1976,  2.2403,  4.2092]]]], device='cuda:0')
1 tensor([[[[ 0.4304,  0.6000, -0.9783, -2.2052,  0.4563]]]], device='cuda:0')
2 tensor([[[[ 0.5385,  0.6000, -3.4294, -1.9448,  5.4774]]]], device='cuda:0')
0 tensor([[[[ 0.5211,  0.6000, -0.2541,  2.1229,  4.2639]]]], device='cuda:0')
1 tensor([[[[ 0.4994,  0.6000, -0.8704, -2.1425,  0.5262]]]], device='cuda:0')
2 tensor([[[[ 0.4027,  0.6000, -3.3703, -2.0262,  5.3404]]]], device='cuda:0')
0 tensor([[[[ 0.4822,  0.6000, -0.3150,  2.0189,  4.1822]]]], device='cuda:0')
1 tensor([[[[ 0.2874,  0.6000, -0.8175, -2.0938,  0.7433]]]], device='cuda:0')
2 tensor([[[[ 0.2758,  0.6000, -3.3432, -2.0897,  5.1153]]]], device='cuda:0')
Predictor Training Loss: 33.070990244547524 KL Loss: 277.2794494628906 CE Loss: 30.298195521036785
Avg wmse 0.25088366866111755 Avg ssim 0.5015349388122559
Predictor Training Loss: 27.340579350789387 KL Loss: 269.1921081542969 CE Loss: 24.648658752441406
Avg wmse 0.217184379696846 Avg ssim 0.5775850415229797
Predictor Training Loss: 27.87080256144206 KL Loss: 255.30182393391928 CE Loss: 25.31778399149577
Avg wmse 0.22169476747512817 Avg ssim 0.5518196225166321
Predictor Training Loss: 42.10783131917318 KL Loss: 269.4878234863281 CE Loss: 39.4129524230957
Avg wmse 0.2743569612503052 Avg ssim 0.45301535725593567
Predictor Training Loss: 40.826071421305336 KL Loss: 271.8482157389323 CE Loss: 38.10758845011393
Avg wmse 0.2813684642314911 Avg ssim 0.43823671340942383
0 tensor([[[[ 0.4822,  0.6000, -0.3150,  2.0189,  4.1822]]]], device='cuda:0')
1 tensor([[[[ 0.2874,  0.6000, -0.8175, -2.0938,  0.7433]]]], device='cuda:0')
2 tensor([[[[ 0.2758,  0.6000, -3.3432, -2.0897,  5.1153]]]], device='cuda:0')
0 tensor([[[[ 0.4664,  0.6000, -0.3831,  1.9242,  4.0894]]]], device='cuda:0')
1 tensor([[[[ 0.5177,  0.6000, -0.7273, -2.0010,  0.8004]]]], device='cuda:0')
2 tensor([[[[ 0.3896,  0.6000, -3.3185, -2.1839,  4.9692]]]], device='cuda:0')
0 tensor([[[[ 0.5239,  0.6000, -0.4650,  1.8220,  4.0365]]]], device='cuda:0')
1 tensor([[[[ 0.4214,  0.6000, -0.6639, -1.9169,  0.9244]]]], device='cuda:0')
2 tensor([[[[ 0.5022,  0.6000, -3.2949, -2.3072,  4.9013]]]], device='cuda:0')
0 tensor([[[[ 0.4888,  0.6000, -0.5339,  1.7210,  4.1137]]]], device='cuda:0')
1 tensor([[[[ 0.3650,  0.6000, -0.5978, -1.8539,  0.7613]]]], device='cuda:0')
2 tensor([[[[ 0.5834,  0.6000, -3.2692, -2.4508,  4.8897]]]], device='cuda:0')
0 tensor([[[[ 0.5096,  0.6000, -0.5989,  1.6115,  4.1765]]]], device='cuda:0')
1 tensor([[[[ 0.3552,  0.6000, -0.5241, -1.8044,  0.5913]]]], device='cuda:0')
2 tensor([[[[ 0.5314,  0.6000, -3.2520, -2.5825,  4.8421]]]], device='cuda:0')
0 tensor([[[[ 0.5432,  0.6000, -0.6636,  1.4921,  4.2160]]]], device='cuda:0')
1 tensor([[[[ 0.5378,  0.6000, -0.4158, -1.7247,  0.6344]]]], device='cuda:0')
2 tensor([[[[ 0.2944,  0.6000, -3.2273, -2.6518,  5.0543]]]], device='cuda:0')
0 tensor([[[[ 0.5446,  0.6000, -0.7330,  1.3750,  4.1775]]]], device='cuda:0')
1 tensor([[[[ 0.2421,  0.6000, -0.3774, -1.6780,  0.8830]]]], device='cuda:0')
2 tensor([[[[ 0.3602,  0.6000, -3.1835, -2.7305,  5.2209]]]], device='cuda:0')
0 tensor([[[[ 0.3778,  0.6000, -0.7681,  1.2873,  4.3318]]]], device='cuda:0')
1 tensor([[[[ 0.3155,  0.6000, -0.3402, -1.6084,  1.0805]]]], device='cuda:0')
2 tensor([[[[ 0.3085,  0.6000, -3.1332, -2.7889,  5.4233]]]], device='cuda:0')
0 tensor([[[[ 0.4056,  0.6000, -0.8181,  1.1991,  4.1968]]]], device='cuda:0')
1 tensor([[[[ 0.4002,  0.6000, -0.3058, -1.5144,  1.2193]]]], device='cuda:0')
2 tensor([[[[ 0.5807,  0.6000, -3.0399, -2.9002,  5.4099]]]], device='cuda:0')
0 tensor([[[[ 0.3526,  0.6000, -0.8740,  1.1309,  4.0250]]]], device='cuda:0')
1 tensor([[[[ 0.3489,  0.6000, -0.2904, -1.4286,  1.3937]]]], device='cuda:0')
2 tensor([[[[ 0.5366,  0.6000, -2.9493, -2.9991,  5.4539]]]], device='cuda:0')
0 tensor([[[[ 0.5570,  0.6000, -0.9591,  1.0207,  4.0549]]]], device='cuda:0')
1 tensor([[[[ 0.2435,  0.6000, -0.2653, -1.3731,  1.1461]]]], device='cuda:0')
2 tensor([[[[ 0.3552,  0.6000, -2.9013, -3.0738,  5.2839]]]], device='cuda:0')
0 tensor([[[[ 0.4847,  0.6000, -1.0253,  0.9192,  4.1350]]]], device='cuda:0')
1 tensor([[[[ 0.5232,  0.6000, -0.2179, -1.2512,  1.1995]]]], device='cuda:0')
2 tensor([[[[ 0.5564,  0.6000, -2.8296, -3.1931,  5.2537]]]], device='cuda:0')
0 tensor([[[[ 0.4153,  0.6000, -1.0703,  0.8257,  4.2633]]]], device='cuda:0')
1 tensor([[[[ 0.4823,  0.6000, -0.1834, -1.1357,  1.2812]]]], device='cuda:0')
2 tensor([[[[ 0.3792,  0.6000, -2.7689, -3.2659,  5.4070]]]], device='cuda:0')
0 tensor([[[[ 0.5637,  0.6000, -1.1283,  0.6972,  4.2885]]]], device='cuda:0')
1 tensor([[[[ 0.5557,  0.6000, -0.1479, -1.0014,  1.3119]]]], device='cuda:0')
2 tensor([[[[ 0.4717,  0.6000, -2.7018, -3.3629,  5.3179]]]], device='cuda:0')
0 tensor([[[[ 0.3929,  0.6000, -1.1811,  0.6144,  4.1446]]]], device='cuda:0')
1 tensor([[[[ 0.3061,  0.6000, -0.1137, -0.9329,  1.1078]]]], device='cuda:0')
2 tensor([[[[ 0.3000,  0.6000, -2.6728, -3.4320,  5.1096]]]], device='cuda:0')
0 tensor([[[[ 0.3383,  0.6000, -1.2387,  0.5525,  3.9629]]]], device='cuda:0')
1 tensor([[[[ 0.4481,  0.6000, -0.0745, -0.8279,  1.2133]]]], device='cuda:0')
2 tensor([[[[ 0.5843,  0.6000, -2.6148, -3.5661,  5.1205]]]], device='cuda:0')
0 tensor([[[[ 0.3362,  0.6000, -1.2838,  0.4816,  4.1461]]]], device='cuda:0')
1 tensor([[[[ 0.3221,  0.6000, -0.0323, -0.7593,  1.0203]]]], device='cuda:0')
2 tensor([[[[ 0.4487,  0.6000, -2.5813, -3.6732,  5.0155]]]], device='cuda:0')
0 tensor([[[[ 0.5352,  0.6000, -1.3505,  0.3655,  4.1911]]]], device='cuda:0')
1 tensor([[[[ 0.3090,  0.6000,  0.0205, -0.7029,  0.8182]]]], device='cuda:0')
2 tensor([[[[ 0.3605,  0.6000, -2.5690, -3.7624,  4.8492]]]], device='cuda:0')
0 tensor([[[[ 0.2659,  0.6000, -1.3959,  0.3170,  3.9590]]]], device='cuda:0')
1 tensor([[[[ 0.3070,  0.6000,  0.0605, -0.6375,  1.0217]]]], device='cuda:0')
2 tensor([[[[ 0.5762,  0.6000, -2.5517, -3.9055,  4.8327]]]], device='cuda:0')
0 tensor([[[[ 0.3380,  0.6000, -1.4639,  0.2669,  3.7771]]]], device='cuda:0')
1 tensor([[[[ 0.5879,  0.6000,  0.1361, -0.5115,  1.0302]]]], device='cuda:0')
2 tensor([[[[ 0.2940,  0.6000, -2.5277, -3.9749,  5.0451]]]], device='cuda:0')
0 tensor([[[[ 0.3727,  0.6000, -1.5293,  0.2005,  3.9350]]]], device='cuda:0')
1 tensor([[[[ 0.4821,  0.6000,  0.2064, -0.4135,  0.9483]]]], device='cuda:0')
2 tensor([[[[ 0.4134,  0.6000, -2.5069, -4.0762,  4.9156]]]], device='cuda:0')
0 tensor([[[[ 0.4820,  0.6000, -1.6065,  0.1080,  4.0169]]]], device='cuda:0')
1 tensor([[[[ 0.5090,  0.6000,  0.2739, -0.3057,  1.0115]]]], device='cuda:0')
2 tensor([[[[ 0.4138,  0.6000, -2.4992, -4.1794,  4.7863]]]], device='cuda:0')
0 tensor([[[[ 0.3881,  0.6000, -1.6789,  0.0434,  3.8697]]]], device='cuda:0')
1 tensor([[[[ 0.4802,  0.6000,  0.3290, -0.1990,  1.0947]]]], device='cuda:0')
2 tensor([[[[ 0.4843,  0.6000, -2.5000, -4.3004,  4.7060]]]], device='cuda:0')
0 tensor([[[[ 0.4284,  0.6000, -1.7668, -0.0179,  3.7506]]]], device='cuda:0')
1 tensor([[[[ 0.4590,  0.6000,  0.3913, -0.1026,  0.9968]]]], device='cuda:0')
2 tensor([[[[ 0.3630,  0.6000, -2.4857, -4.3900,  4.8705]]]], device='cuda:0')
0 tensor([[[[ 0.5793,  0.6000, -1.8843, -0.1024,  3.7649]]]], device='cuda:0')
1 tensor([[[[ 0.4590,  0.6000,  0.3913, -0.1026,  0.9968]]]], device='cuda:0')
2 tensor([[[[ 0.5183,  0.6000, -2.4726, -4.5190,  4.8138]]]], device='cuda:0')
0 tensor([[[[ 0.4261,  0.6000, -1.9777, -0.1537,  3.6442]]]], device='cuda:0')
1 tensor([[[[ 0.4590,  0.6000,  0.3913, -0.1026,  0.9968]]]], device='cuda:0')
2 tensor([[[[ 0.3986,  0.6000, -2.4488, -4.6157,  4.9537]]]], device='cuda:0')
Traceback (most recent call last):
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/train.py", line 368, in <module>
    main()
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/train.py", line 226, in main
    envs.render(ogm_for_vis)
  File "/home/liyiping/dev/MARL2_check_ogm_obst_/CrowdNav_Prediction_AttnGraph/baselines/baselines/common/vec_env/vec_env.py", line 167, in render
    return self.venv.render(mode=mode)
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/rl/networks/dummy_vec_env.py", line 91, in render
    return self.envs[0].render(mode=mode)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/gym/core.py", line 235, in render
    return self.env.render(mode, **kwargs)
  File "/home/liyiping/dev/ogm_pred/ogm_sogmp_trans_pos/CrowdNav_Prediction_AttnGraph/crowd_sim/envs/crowd_sim_var_num.py", line 1089, in render
    ax.add_artist(ogm)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/axes/_base.py", line 2258, in add_artist
    a.set_clip_path(self.patch)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/artist.py", line 774, in set_clip_path
    path.get_transform())
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/patches.py", line 262, in get_transform
    return self.get_patch_transform() + artist.Artist.get_transform(self)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/patches.py", line 753, in get_patch_transform
    return transforms.BboxTransformTo(bbox) \
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/transforms.py", line 1342, in __add__
    return (composite_transform_factory(self, other)
  File "/home/liyiping/anaconda3/envs/CrowdNav2/lib/python3.10/site-packages/matplotlib/transforms.py", line 2528, in composite_transform_factory
    elif isinstance(b, IdentityTransform):
KeyboardInterrupt